library {{pubName}}.api;

import 'package:dio/dio.dart';
import 'package:jaguar_serializer/jaguar_serializer.dart';
{{#protoFormat}}
import 'package:jaguar_serializer_protobuf/proto_repo.dart';
{{/protoFormat}}
import 'package:jaguar_retrofit/jaguar_retrofit.dart';
import 'package:jaguar_mimetype/jaguar_mimetype.dart';

{{#apiInfo}}{{#apis}}import 'package:{{pubName}}/api/{{classFilename}}.dart';
{{/apis}}{{/apiInfo}}
{{#models}}{{#model}}import 'package:{{pubName}}/model/{{classFilename}}{{#protoFormat}}.pb{{/protoFormat}}.dart';
{{/model}}{{/models}}


{{#jsonFormat}}
final _jsonJaguarRepo = JsonRepo()
{{#models}}{{#model}}{{^isEnum}}..add({{classname}}Serializer()){{/isEnum}}
{{/model}}{{/models}};

final Map<String, CodecRepo> _defaultConverters = {
    MimeTypes.json: _jsonJaguarRepo,
};
{{/jsonFormat}}

{{#protoFormat}}
final _protoJaguarRepo = ProtoCodecRepo()
{{#models}}{{#model}}..add((data) => {{classname}}.fromBuffer(List<int>.from(data)))
{{/model}}{{/models}};
final _jsonJaguarRepo = ProtoCodecRepo(isJsonFormatEnabled: true)
{{#models}}{{#model}}..add((data) => {{classname}}.fromBuffer(List<int>.from(data)))
{{/model}}{{/models}};

final Map<String, CodecRepo> _defaultConverters = {
    MimeTypes.json: _jsonJaguarRepo,
    MimeTypes.binary: _protoJaguarRepo,
};
{{/protoFormat}}

class {{clientName}} {
    final Dio dio;
    final Duration timeout;
    Route _baseRoute;

    {{clientName}}({this.dio, String baseUrl, this.timeout = const Duration(minutes: 2),}) {
        _baseRoute = Route(baseUrl).withClient(dio);
    }

    {{#apiInfo}}{{#apis}}
    {{classname}} get{{classname}}() {
        return {{classname}}(base: _baseRoute, converters: _defaultConverters, timeout: timeout,);
    }
    {{/apis}}{{/apiInfo}}
}
