class {{classname}} {{#parent}}extends {{{parent}}}{{/parent}} {
  {{#vars}}{{#description}} /* {{{description}}} */{{/description}}
  @Alias('{{{baseName}}}', isNullable:{{#isNullable}} true{{/isNullable}}{{^isNullable}} false{{/isNullable}}{{#allowableValues}}
          {{^enumVars.empty}}{{^isString}}{{! isString because inline enums are not handled for now }}
             , processor: const {{{datatypeWithEnum}}}FieldProcessor(),
          {{/isString}}{{/enumVars.empty}}
      {{/allowableValues}}
      {{#isDate}}
        , processor: const DateFieldProcessor(),
      {{/isDate}}
  )
  final {{{datatype}}} {{name}};

  {{/vars}}
  const {{classname}}({
    {{#parentModel}}
    {{#allVars}}{{dataType}} {{name}},{{/allVars}}
    {{/parentModel}}
    {{#vars}}this.{{name}},{{/vars}}
  }){{#parentModel}}: super({{#allVars}}{{name}}: {{name}},{{/allVars}}){{/parentModel}};

  {{classname}} copyWith({
    {{#allVars}}
      {{{dataType}}} {{name}},
    {{/allVars}}
  }) {
    return {{classname}}(
      {{#allVars}}
        {{name}}: {{name}} ?? this.{{name}},
      {{/allVars}}
    );
  }

  @override
  String toString() {
    return '{{classname}}[{{#allVars}}{{name}}=${{name}}, {{/allVars}}]';
  }
}